<?xml version="1.0" standalone="no"?> 
<!DOCTYPE s1 SYSTEM "../../style/dtd/document.dtd"[
<!ENTITY done-c SYSTEM "DONE">
<!ENTITY status-c SYSTEM "STATUS">
<!ENTITY history-c SYSTEM "history.xml">]>

<!--
 * The Apache Software License, Version 1.1
 *
 *
 * Copyright (c) 1999-2004 The Apache Software Foundation.  All rights 
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:  
 *       "This product includes software developed by the
 *        Apache Software Foundation (http://www.apache.org/)."
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names "Xalan" and "Apache Software Foundation" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written 
 *    permission, please contact apache@apache.org.
 *
 * 5. Products derived from this software may not be called "Apache",
 *    nor may "Apache" appear in their name, without prior written
 *    permission of the Apache Software Foundation.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of the Apache Software Foundation and was
 * originally based on software copyright (c) 1999, Lotus
 * Development Corporation., http://www.lotus.com.  For more
 * information on the Apache Software Foundation, please see
 * <http://www.apache.org/>.
 -->
<s1 title="&xslt4c; Release Notes">
<p>Release notes for &xslt4c-current;</p>
 <ul>
  <li><link anchor="status">Status</link></li>
  <li><link anchor="build">Rebuilding &xslt4c; and the sample applications</link></li> 
  <li><link anchor="contact">Getting in touch</link></li>
  <li><link anchor="history">History of software changes</link></li>  
 </ul>
 <anchor name="status"/>
 <s2 title="Status">
   <ul>
    <li><link anchor="done">Changes for &xslt4c; version 1.7</link></li>
    <li><link anchor="bugs">Bug reporting</link></li>    
    <li><link anchor="xml4c">Version of &xml4c; to use</link></li>
    <li><link anchor="to-do">To-do tasks for future &xslt4c; releases</link></li>
   </ul>
   <anchor name="done"/>
   <s3 title="Changes for &xslt4c; version 1.7">
     <p>Major updates since version 1.6 include:</p>
     <ul>
      <li><resource-ref idref="bugsfixedforthisrelease"/>.</li>
      <li>Message Localization Support. This feature enables &xslt4c; to issue diagnostic messages 
      in languages other than the default language (English). In order to utilize this feature, 
      the user must provide a version of the &xslt4c; message catalog that has been translated in 
      their language of choice. For more information on how to exploit this feature, please see  
      <link anchor="locale">Steps for doing a Build with Message Localization Support</link>.</li>
      <li>Build, packaging, and installation improvements. Changes to the &xslt4c; makefiles now 
      allow for a more flexible build, packaging, and install process. Each step in a typical 
      build process can be invoked by specifying the appropriate target, for example to build the 
      executable, and/or samples, or install the build at user-specified location. For more 
      information on building &xslt4c;, please see <link anchor="unix">Steps for doing a Unix build
      </link>.</li>
      <li>Deprecated DOM Support. The XercesBridge classes have been marked deprecated and moved 
      into an exclusive directory within the xalanc/XercesParserLiaison directory called 
      'Deprecated'. If your application is dependent on these classes to interface with the 
      deprecated Xerces DOM you must alter your include directive with the 'Deprecated' directory. 
      For example:<br/><br/>
      <code>#include "xalanc/XercesParserLiaison/XercesDocumentBridge.hpp"</code><br/><br/>
      should be changed to:<br/><br/>
      <code>#include "xalanc/XercesParserLiaison/Deprecated/XercesDocumentBridge.hpp"</code><br/><br/></li>
      <li>Upgrade from Xerces-C 2.3 to Xerces-C 2.4. </li>
      <li>Implementation of EXSLT string extension functions encode-uri() and decode-uri(). </li>
      <li>Implementation of EXSLT dynamic extension function evaluate(). </li>
      <li>Implementation of EXSLT date-time extension function date-time().</li>
      <li>Porting of ThreadSafe example to UNIX platform.</li>
     </ul>  
   </s3>  

   <anchor name="bugs"/>
   <s3 title="Bug reporting">
     <p>All known &xslt4c; bugs are listed in <resource-ref idref="bugzilla"/>. For a list of open bugs with links to each bug
      report, see <resource-ref idref="buglist"/>. If you find a new bug, please enter a XalanC bug report in this
      database.</p>
     <note>Before you can enter your first bug report, you must submit your email address to Bugzilla and receive a password.</note> 
     <p>We strongly encourage you write patches for problems you find and submit them to
      xalan-dev@xml.apache.org. We review the patches we receive to make sure they do not break something else, and (assuming they 
     do not) include them in our next release. In the interest of fixing bugs, adding enhancements, and addressing outstanding design
     issues, we sincerely want (and need!) your active participation in the ongoing development of Xalan.</p>
     </s3><anchor name="xml4c"/>     
     &status-c;     
  </s2><anchor name="build"/>
  <s2 title="Rebuilding &xslt4c;">
<ul>
<li><link anchor="jar">Rebuilding &xslt4c;</link></li>
<li><link anchor="samples">Rebuilding sample applications</link></li>
</ul>
<anchor name="jar"/> 
   <s3 title="Rebuilding &xslt4c;">
   <ul>
    <li><link anchor="needed">What you need from the distributions</link></li>   
    <li><link anchor="win32">Steps for doing a Windows build</link></li>
    <li><link anchor="unix">Steps for doing a UNIX build</link></li>       
    <li><link anchor="locale">Steps for doing a Build with Message Localization Support</link></li>
   </ul></s3><anchor name="needed"/>
   <s3 title="What you need from the distributions">
   <p>To rebuild &xslt4c;, you need the &xslt4c; source files, the &xml4c; header files, and
   for Windows the &xml4c; .lib file. If you want to rebuild with the ICU, you will need to download the ICU source package to build the ICU libraries. </p>
  <p>The &xslt4c; source tree is in the src subdirectory of the &xslt4c; <link idref="getstarted" anchor="download">binary distributions</link>. The &xml4c; header files are in the include/xercesc tree of the corresponding &xml4c; binary distributions. The Windows Xerces .lib file is in the lib directory of the &xml4c; Windows binary distribution.</p> 

<note>You can also download &xslt4c; source distributions from <resource-ref idref="xslt4c-distdir"/>: &xslt4c-dist;-src.zip and &xslt4c-dist;-src.tar.gz. &xml4c; source distributions are available from <resource-ref idref="xml4c-distdir"/>: 
&xml4c-dist;-src.zip and &xml4c-dist;-src.tar.gz.</note>
<p>Keep in mind that at any given point in time the &xslt4c; and &xml4c; source trees in the Apache XML repository may not be consistent. When we release a version of &xslt4c; we certify that it is compatible with a given version of &xml4c;. To be safe, use the Xerces distributions that we certify as compatible. Reminder: &xslt4c-current; is compatible with &xml4c-used;.</p>
   <p>For information on using the <resource-ref idref="icu"/>, see
   <link idref="usagepatterns" anchor="icu">Using the ICU</link>.
   &xslt4c-current; has been tested with &icu-used;. You may be able to use newer ICU releases as they appear.</p>
   </s3><anchor name="win32"/>
  <s3 title="Steps for doing a Windows build">
  <p>To build &xslt4c; on Windows, you need &xml4c; and MS Visual C++ 6.0 installed with Service Pack 3 for Visual C++ and Visual Studio. You should also apply the bug fixes for the C++ standard library that shipped with Visual C++ 6.0. These fixes are available from the Dinkumware site: <jump href="http://www.dinkumware.com/vc_fixes.html">http://www.dinkumware.com/vc_fixes.html</jump>.</p> 
  <p>If you do not want to apply the Dinkumware patches, or you are using a different Service Pack, you must rebuild all of the Xerces and Xalan binaries.</p>
<p>Before you do the following, be sure you have <link idref="getstarted" anchor="windowspath">provided Visual C++ the paths to the Xerces headers and libraries</link>.</p>
  <ol>    
     <li>If you want to enable ICU support, install the ICU so the ICU root directory is at the same level as the xml-xerces directory (see <link 
      idref="usagepatterns" anchor="icu">Using the ICU</link>).  If you choose to build Xalan with ICU, you will need to rebuild the Xerces binary with ICU as well.<br/><br/></li>
    <li>Use Visual C++ to open the Xalan workspace from the &xslt4c-dist;-src\Projects\Win32\VC6.  If you are building with ICU, then use XalanICU.dsw.  Otherwise, open the Xalan.dsw workspace.
    <br/><br/></li>
    <li>From Visual C++, go to "Tools" and select "Options".  From the "Options" window, click on the "Directories" tab and do the following:
    <ol>
    <li>Show Directories for: Executable files.  Add the Xerces bin directory to the list.</li>
    <li>Show Directories for: Include files.  Add the Xerces include directory to the list.  If you are building with ICU, add the ICU include directory to the list as well.</li>
    <li>Show Directories for: Library files. Add the Xerces lib directory to the list.  If you are building with ICU, add the ICU lib directory to the list as well.</li>
    </ol></li>
    <li>Use Visual C++ to build the Xalan library and executables of interest.</li>
  </ol>
  <note>To recompile existing applications without changing your source code, be sure to modify your Project settings to pick up the Xalan headers in its new location. (see image below)</note>
  <p><img src="options-sane.gif" alt="Visual C++ 6.0 Include Directories change"/></p>
  </s3><anchor name="unix"/>
<s3 title="Steps for doing a UNIX build">
    <ol>
      <li>The Xalan build files are written for GNU make, and will not work with other make utilities.<br/><br/></li>    
      <li>Set the XERCESCROOT environment variable to the path to the root of &xml4c;.<br/><br/></li>    
      <li>Set the XALANCROOT environment variable to the path to the c directory in the root of the &xslt4c;
       distribution.  For example, if the distribution is located in "/home/xalan", you would set the XALANCROOT to "/home/xalan/&xslt4c-dist;-src". <br/><br/></li>
      <li>(Optional) If you are including the ICUBridge, install the ICU, use the shell to define XALAN_USE_ICU and to set the ICUROOT environment variable to the path to the ICU root. For more information, see (see <link idref="usagepatterns" anchor="icu">Using the ICU</link>).  Note that building Xalan with ICU requires that Xerces must also be built with ICU.<br/><br/></li>
      <li>Change directory to &xslt4c-dist;-src in the &xslt4c; distribution. You can also 
          build Xalan-C outside of the source tree, but you will need to adjust the path to the
          runConfigure script in the next step.<br/><br/></li>      
      <li>Run the runConfigure utility and provide the platform, C compiler, and C++ compiler flags as 
          indicated below.  The runConfigure utility is used to generate the appropriate Makefile for 
          the desired build platform based on the options specified by the user. Valid options for the 
          runConfigure utility are:<br/><br/>
          <code>./runConfigure -p &lt;value&gt; -c &lt;value&gt; -x &lt;value&gt; [-[flag] &lt;value&gt;]</code><br/><br/>
          <table>
          <tr><th>flag</th><th>Description</th></tr>
          <tr><td>p</td><td>Build platform. Option must be provided by user. Valid values <br/>include: 
          aix, linux, freebsd, netbsd, solaris, hp-10, hp-11, irix, tru64, <br/>macosx. </td></tr>
          <tr><td>c</td><td>C compiler name. Example: gcc, cc, c89, xlc, etc.</td></tr>
          <tr><td>x</td><td>C++ compiler name. Example: g++, xlC, CC, etc.</td></tr>
          <tr><td>d</td><td>Indicates build is a debug build. Takes no values. Default is no <br/>debug.</td></tr>
          <tr><td>t</td><td>Transcoder to use. Valid value is 'icu'. Default is null.</td></tr>
          <tr><td>m</td><td>Type of localization support method. Valid values include: inmem, <br/>icu, and nls. 
          Default is icu.</td></tr>
          <tr><td>M</td><td>Locale for Message Localization Support. Default is "en_US'</td></tr>
          <tr><td>r</td><td>Threads option. Valid values include: pthread or dce. Default is <br/>dce</td></tr>
          <tr><td>b</td><td>Specify whether it is a 32-bit or 64-bit build. Valid values are 32 <br/>and 64. 
          Default is 32-bit</td></tr>
          <tr><td>P</td><td>Install root directory. Used if invoking build with gmake install or <br/>gmake 
          install-package. Default install root directory is /usr/local</td></tr>
          <tr><td>l</td><td>Extra link options other than the default. Default is null</td></tr>
          <tr><td>z</td><td>Extra compiler options other than the default. Default is null</td></tr>
          <tr><td>C</td><td>Extra configuration options.</td></tr>
          <tr><td>h</td><td>To get help on the above commands. Default is no help.</td></tr>
          </table><br/>
          <ref>Linux using GCC:</ref>&nbsp;&nbsp;<code>./runConfigure -p linux -c gcc -x c++</code><br/>
          <ref>Linux using the Intel compiler:</ref>&nbsp;&nbsp;<code>./runConfigure -p linux -c icc -x icpc</code><br/>
          <ref>AIX (32-bit):</ref>&nbsp;&nbsp;&nbsp;&nbsp;<code>./runConfigure -p aix -c xlc -x xlC</code><br/><br/>
          <ref>AIX (64-bit):</ref>&nbsp;&nbsp;&nbsp;&nbsp;<code>./runConfigure -p aix -c xlc -x xlC -b 64</code><br/><br/>
          <ref>HP-UX 11 (32-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p hp-11 -c cc -x aCC</code><br/><br/>
          <ref>HP-UX 11 (64-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p hp-11 -c cc -x aCC -b 64</code><br/><br/>
          <ref>Solaris (32-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p Solaris -c cc -x CC</code><br/><br/>
          <ref>Solaris (64-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p Solaris -c cc -x CC -b 64</code><br/><br/>
          If you choose to install the distribution after building the libraries and executables, 
          then you will need to indicate where you would like the distribution to be installed. 
          To specify the install directory for your distribution, specify the flag -P &lt;install directory&gt;. 
          For example, building and installing on the AIX platform:<br/><br/>
          <code>./runConfigure -p aix -c xlc -x xlC -P $HOME/my_xalan</code><br/><br/>
          Following the build process, standard binary directories bin, lib, and include would be created 
          under my_xalan.<br/><br/>
          To see the other runConfigure flags you may include, use the help flag:<br/><br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>./runConfigure -h</code><br/><br/></li>
      <li>Purge the previous build:<br/><br/>
          <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;make clean</code><br/><br/></li>
      <li>Run the new build:<br/><br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>make</code><br/>
          or<br/>
          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>make <ref>targ</ref></code><br/><br/>
          where <ref>targ</ref> can be one of:
          <table>
          <tr><th>targ</th><th>Description</th></tr>
          <tr><td>all</td><td>Build the libraries and Xalan executable. This is the default target <br/>if no targ 
          is specified.</td></tr>
          <tr><td>clean</td><td>Deletes existing binaries, executables, libraries, tests, and <br/>samples.</td></tr>
          <tr><td>install</td><td>Build the library, executables and copy them (along with <br/>the header files) 
          the specified install location.</td></tr>
          <tr><td>install-package</td><td>Installs the library, executables, samples to the <br/>specified location.</td></tr>
          <tr><td>samples</td><td>Builds the samples.</td></tr>
          <tr><td>tests</td><td>Builds the tests.</td></tr>
          </table>
      </li>
    </ol>
    <note>To recompile existing applications without changing your source code, be sure to modify the command line in your Makefile to pick up the Xalan headers from it's new location. e.g:  if your xalan source location is in /home/&xslt4c-dist;-src,</note><p>
    <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>CC ... -I/home/&xslt4c-dist;-src/src -I/home/&xslt4c-dist;-src/src/xalanc mysrc.cpp</code><anchor name="64"/></p>
   </s3>
   <anchor name="locale"/>
   <s3 title="Steps for doing a Build with Message Localization Support">
   <p>Message Localization Support is a new feature to allow users to build XSLT4C such that 
   diagnostic messages are issued in the language of their choice. Message localization support 
   comes in three flavours:</p>
   <ul>
   <li>Building static messages in the form of a library (DLL or shared object) which can be bound 
   to the Xalan executable. This method is referred to as "in memory". </li>
   <li>Building messages in the form of a library using localization support provided by the 
   International Components for Unicode (ICU). By default, XSLT4C is built using ICU localization 
   support. </li>
   <li>Building messages in the form of a message catalog. This method utilizes the localization 
   support provided by the Unix National Language Support (NLS) system. This method is supported 
   for UNIX platforms only. </li>
   </ul>
   <p>Regardless of which method you choose, a message file containing translated messages in the 
   language of your choice must be provided. The standard message file provided in the XSLT4C 
   version 1.7 beta source package is in XML Localization Interchange File Format (XLIFF) format 
   and conforms to the XLIFF 1.1 standard (please see 
   <jump href="http://www.oasis-open.org/committees/xliff/documents/xliff-specification.htm">
   http://www.oasis-open.org/committees/xliff/documents/xliff-specification.htm</jump> for more 
   information.) All message files must be written and conform with the XLIFF 1.1 standard.</p>
   <p>Once an XLIFF message file has been created, the XLIFF file should be stored under 
   &xslt4c-dist;-src/c/src/xalanc/NLS directory (for example, the default XLIFF message file 
   provided is xslt4cMessages_en_US.xlf). To build, you will need to follow the same steps 
   as shown above for building in Unix or Windows but with a small change.</p>
   <p>For building on Windows platform with "In Memory" method:</p>
   <ol>
   <li>Open the Xalan workspace using Microsoft Visual C++. </li>
   <li>Select the Localization project, and go to Settings and click on the "General" tab. Modify 
   the build command line to use "nmake /f Localization.mak TYPE=inmem LOCAL=en_US"</li>
   <li>Add the Xerces-C bin directory to the PATH </li>
   <li>Add the Xerces-C lib directory to the library directory list </li>
   <li>Add the Xerces-C include directory to the include directory list. </li>
   <li>Run "Build all" with the configuration of your choice. </li>
   </ol>
   <p>For building on the Windows platform with ICU method:</p>
   <ol>
   <li>Open the Xalan workspace using Microsoft Visual C++. </li>
   <li>Select the AllInOneWithICU project, and ensure that the project depends on the Localization 
   project. </li>
   <li>Select the Localization project, and go to Settings and click on the "General" tab. Modify 
   the build command line to use "nmake /f Localization.mak TYPE=icu LOCAL=en_US"</li>
   <li>Add the Xerces-C bin directory and ICU bin directory to the PATH </li>
   <li>Add the Xerces-C lib directory and ICU lib directory to the library directory list </li>
   <li>Add the Xerces-C include directory and ICU include directory to the include directory list </li>
   <li>Open the tools.ini file under Projects\Win32\VC6\Utils\Localization and add the ICU root 
   directory to the ICUROOT variable setting. </li>
   <li>Run "Build all" with the configuration of your choice. </li>
   </ol>
   <p>For building on the Unix platform:</p>
   <ol>
   <li>Repeat steps 1 through 5 as outlined under "Steps for doing a UNIX Build" </li>
   <li>Run the runConfigure and provide the platform, C compiler, C++ compiler, the message locale 
   system flavour you are intending to build, and the locale support.<br/><br/>
   Example 1: to use the NLS method for localization support using the default locale en_US:<br/><br/>
   <ref>AIX (32-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p aix -c xlc -x xlC -m nls</code><br/><br/>
   <ref>AIX (64-bit):</ref>&nbsp;&nbsp;.<code>/runConfigure -p aix -c xlc -x xlC -b 64 -m nls</code><br/><br/>
   Example 2: to use the 'icu' method for localization support using the locale fr_FR:<br/><br/>
   <ref>AIX (32-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p aix -c xlc -x xlC -m icu -M fr_Fr</code><br/><br/>
   <ref>AIX (64-bit):</ref>&nbsp;&nbsp;<code>./runConfigure -p aix -c xlc -x xlC -b 64 -m icu -M fr_Fr</code><br/><br/>
   </li>
   <li>Perform steps 7 and 8 as outlined under "Steps for doing a UNIX Build" </li>
   </ol>
   <p>After XSLT4C and associated libraries have been successfully built, the message catalog 
   will be stored in the directory &xslt4c-dist;-src/c/src/xalanc/NLS/&lt;locale_name&gt; (for example
   &xslt4c-dist;-src/c/src/xalanc/NLS/en_US/) under the file name:<br/><br/>
   <table>
   <tr><th>Localization Build Type</th><th>File Name</th></tr>
   <tr><td><ref>ICU or "in memory" method:</ref></td><td>libxslt4cMessages_1_7.so (for UNIX)<br/>
   xslt4cMessages_1_7.dll and xslt4cMessages_1_7.lib (for Windows)
   </td></tr>
   <tr><td><ref>NLS method:</ref></td><td>xslt4cMessages_1_7.cat</td></tr>
   </table>
   </p>
   <p>The location of the message library, &xslt4c; and &xml4c; binaries need to be added to the PATH and 
   library path variables. Depending on the Message Localization Support method you've chosen, the 
   following steps will need to be performed such that XSLT4C will be able to utilize the message 
   library. </p>
   <ul>
   <li>For an "in memory" or "icu" build, the location of the XSLT4C and XML4C executables need to 
   be added to the PATH variable. The location of the message library will need to be added to: 
   <ul>
   <li>the LIBPATH variable for AIX users </li>
   <li>the LD_LIBRARY_PATH variable for RedHat, SuSE, and Solaris users </li>
   <li>the SHLIB_PATH variable for HP-UX users. </li>
   </ul></li>
   <li>For an NLS build, the message catalog will need to be added to the NLSPATH. </li>
   </ul>   
   </s3>   
   <anchor name="samples"/>
   <s3 title="Rebuilding a Sample application">
   <p>In the Windows32 distribution, all of the sample applications can be built from the Xalan.dsw Visual C++ workspace. If you modify a sample and want to recompile it, you can recompile the .cpp file(s) and rebuild the executable.</p>
<p>The Makefile that come with the UNIX distributions include targets for rebuilding one or all of the sample applications (with the exception of the ThreadSafe sample, which in its current form only runs under Windows). To rebuild one or more sample applications, go to the root directory of your source package or the samples directory of your binary package, and run<br/><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>gmake <ref>Target</ref></code><br/><br/>
where <ref>Target</ref> is <code>Samples</code> (all the samples), <code>ApacheModuleXSLT</code>, <code>CompileStylesheet</code>, <code>DocumentBuilder</code>, <code>ExternalFunctions</code>, <code>ParsedSourceWrappers</code>, <code>SerializedNodeSet</code>, <code>SimpleTransform</code>,  <code>SimpleXPathAPI</code>, <code>SimpleXPathCAPI</code>, <code>StreamTransform</code>, <code>ThreadSafe</code> (Windows only), <code>TraceListen</code>, <code>TransformToXercesDOM</code>, <code>UseStylesheetParam</code>, <code>XPathWrapper</code>, <code>XalanTransform</code>, or <code>XalanTransformerCallback</code>.</p>
<note>For information on building Apache Module, see <link idref="samples" anchor="apachemodulexslt">ApacheModuleXSLT</link></note>
   </s3>
 </s2><anchor name="contact"/>
 <s2 title="Getting in Touch">
  <p>Your feedback is more than welcome. Offers of help are even more so! Perhaps you would like to contribute to the ongoing development, testing, or documentation of &xslt4c;.</p> 
<p>Please email your comments, questions, suggestions, bug reports, and offers to help to <human-resource-ref idref="xalandev"/>.</p>
 </s2><anchor name="history"/>
 <s2 title="Cumulative history of software changes">
   <p>The following sections list the changes in each release since &xslt4c; version 0.40.0.</p>
   &history-c;
 </s2> 
</s1>