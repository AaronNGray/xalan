<?xml version="1.0" standalone="no"?>  
<!DOCTYPE s1 SYSTEM "sbk:/style/dtd/document.dtd">

<s1 title="Getting Started">
<ul>
<li><link anchor="download">Downloading what you need</link></li>
<li><link anchor="path">Setting up the system path</link></li>
<li><link anchor="samples">Trying out the samples</link></li>
<li><link anchor="commandline">Performing your own transformations from the command line</link></li>
<li><link anchor="apps">Setting up your own XSLT applications</link></li>
</ul>
<anchor name="download"/>
<p>For Xalan-C 1.0.0, we are distributing a Windows32 build and a Linux build. In the future, we intend to add more
builds.</p>
<s2 title="Downloading what you need">
<p>To run the Xalan command-line utility for performing transformations, you need the following:</p>

<ul>Windows
<li> The utility: TestXSLT.exe (Windows32), TestXSLT (Linux)</li>
<li>The 8 Xalan-C dynamic link libraries Windows32): DOMSupport.dll, PlatformSupport.dll, XalanDOM.dll, XercesParserLiaison.dll; 
    XercesPlatformSupport.dll, XMLSupport.dll, XPath.dll, XSLT.dll</li>
<li>The Xerces-C dynamic link library to which the Xalan-C dlls are linked: xerces-c_1_1.dll</li>
Linux
</ul>

<p>For the Windows32 build, download <jump href="http://xml.apache.org/dist/xalan-c/xalan-c_1_0_0.zip">xalan-c_1_0_1.zip</jump>. For the Linux build, download <jump href="http://xml.apache.org/dist/xalan-j/xalan-c_1_0_0.tar.gz">xalan-c_1_0_0.tar.gz</jump>. Both of these files contain the Xalan dlls and command-line utility (TextXSLT.exe), along with the Xerces-C 1.1.0 dynamic link library (xerces-c_1_1.dll). You can use a zip or tar utility to expand these files into a full build.</p>
<p>To build your own &xslt4c; applications, you also need need the Xalan-C and Xerces-C header files and libraries. The Xalan-C header files are in the source tree in both distributions: xml-xalan/c/src. In the Windows32 distribution (built with Microsoft Visual C++ 6.0), the dlls and libraries are in xml-xalan/Build/Win32/VC6/Release. In the Linux distribution (built with make), the shared object libraries are in xml-xalan/c/lib.</p>
<p>To get the Xerces-C source tree, download the Xerces-C 1.1.? Source distribution from the <resource-ref idref="Xerces-c-dist"/>. </p>

</s2><anchor name="path"/>
<s2 title="Setting up the system path">
<p>The Xalan-C distribution includes a build directory with the Xalan and Xerces dlls listed above, and the executables for the sample applications. Include this directory on your system plath. If you do your own Xalan and Xerces builds, be sure to include the directories that contain these dlls and executables on your system path.</p>
</s2><anchor name="samples"/>
<s2 title="Trying out the samples">
<p>The &xslt4c; distribution includes a number of basic sample applications. These samples are easy to run, and you 
can review the source files -- all of which are brief -- to see just how they work.</p>
<p>To run the samples, do the following:</p>
<ol>
<li>Set up your path(see above), including the directory with the sample executables.</li>
<li>Go to the samples subdirectory containing the sample (use the DOS shell if you are running Windows).</li>
<li>Run the sample from the command line.</li>
<li>Examine the application source files.</li>
</ol>
<p>For example, go to the SimpleTransform subdirectory and issue the following command:</p>
<p><code>SimpleTransform</code></p>
<p>The sample writes the transformation result to foo.out. To see how the example works, examine the source files: foo.xml, foo.xsl, foo.out, and SimpleTransform.cpp.</p>
<p>For more information about all the samples, see <link idref="samples">&xslt4c; Samples</link>.</p>
</s2><anchor name="commandline"/>
<s2 title="Performing your own transformations from the command line">
<p>TestXSLT.exe provides a basic utility for performing transformations from the command line. The command line for 
most standard transformations is as follows:</p>
<p><code>TestXSLT -in <ref>xmlSource</ref> -xsl <ref>stylesheet</ref> -out <ref>outputfile</ref></code></p>
<p>where <ref>xmlSource</ref> is the XML source file name, <ref>stylesheet</ref> is the XSL stylesheet file name, and <ref>outputfile</ref> is the output file name.</p>
<p>If you want the output to be displayed on the screen, simply omit the -out flag and argument.</p>
<p>You can use this utility to try out XSL stylesheets you have written, to make sure they do what you expect with the XML source files they are designed to transform. The utility provides useful messages if the source file or stylesheet is not well formed. If you include a DOCTYPE statement in your XML source files and include the -validate flag on the command line, the utility will also let you know whether the XML document is valid (conforms to that DOCTYPE). For more information, see <link idref="commandline">Command-Line Utility</link>.</p>
</s2><anchor name="apps"/>
<s2 title="Setting up your own C++ applications">
<p>You can start by using your own XML source files and XSL stylesheets with the sample applications, which illustrate a number of the <link idref="usagepatterns">basic usage patterns</link>.</p>
<p>If you modify a C++ source file, be sure to rebuild the application executable and place it on the system path. Here are some basic points to keep in mind as you are setting up transformations:</p>
<p>For more information on setting up applications, see <link idref="usagepatterns">Basic Usage Patterns</link>.</p>
</s2>
</s1>